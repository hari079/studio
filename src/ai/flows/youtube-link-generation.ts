
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Generates YouTube video links related to a specific food storage query.
 *
 * - generateYoutubeLinks - A function that generates YouTube video links.
 * - GenerateYoutubeLinksInput - The input type for the generateYoutubeLinks function.
 * - GenerateYoutubeLinksOutput - The return type for the generateYoutubeLinks function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateYoutubeLinksInputSchema = z.object({
  foodItem: z.string().describe('The specific food item the user is asking about.'),
  question: z.string().describe('The specific question the user has about the food item.'),
});
export type GenerateYoutubeLinksInput = z.infer<typeof GenerateYoutubeLinksInputSchema>;

const GenerateYoutubeLinksOutputSchema = z.object({
  videoLinks: z
    .array(z.string())
    .describe('An array of YouTube video links relevant to the food item and question.'),
});
export type GenerateYoutubeLinksOutput = z.infer<typeof GenerateYoutubeLinksOutputSchema>;

export async function generateYoutubeLinks(input: GenerateYoutubeLinksInput): Promise<GenerateYoutubeLinksOutput> {
  return generateYoutubeLinksFlow(input);
}

const prompt = ai.definePrompt({
  name: 'youtubeLinkGenerationPrompt',
  input: {schema: GenerateYoutubeLinksInputSchema},
  output: {schema: GenerateYoutubeLinksOutputSchema},
  prompt: `You are an expert YouTube video curator specializing in food storage. Given a food item and a question, your task is to find up to 3 **currently available and publicly accessible** YouTube video links that directly and effectively answer the user's question.

Follow these steps:

1.  **Formulate Search Queries:** First, think of 2-3 effective YouTube search queries for the given \`{{{foodItem}}}\` and \`{{{question}}}\`. For example, if the food item is "avocado" and the question is "how to stop it from browning", good search terms might be "keep avocado from browning" or "store cut avocado".

2.  **Identify Videos:** Imagine you are performing these searches on YouTube. From the (imagined) search results, select up to 3 videos that are most relevant, clear, and from reliable sources if possible (e.g., official channels, well-known culinary experts).

3.  **Verify Availability (Crucial):** Only include links to videos that you have extremely high confidence are **currently online, public, and not private or deleted.** If you are unsure, do not include the link. It is better to return fewer (or even no) links than to return broken or irrelevant ones. Do not suggest videos that seem to be part of rapidly changing playlists or user-generated content that is likely to be removed.

4.  **Format Output:** Respond with a JSON object containing a "videoLinks" array of YouTube video URLs. Ensure each item in the "videoLinks" array is a valid YouTube URL string. If no relevant and currently available videos are confidently found, return an empty array.

User's Food Item: "{{{foodItem}}}"
User's Question: "{{{question}}}"
`,
});

const generateYoutubeLinksFlow = ai.defineFlow(
  {
    name: 'generateYoutubeLinksFlow',
    inputSchema: GenerateYoutubeLinksInputSchema,
    outputSchema: GenerateYoutubeLinksOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);

