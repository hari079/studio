
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Generates YouTube video links related to a specific food storage query.
 *
 * - generateYoutubeLinks - A function that generates YouTube video links.
 * - GenerateYoutubeLinksInput - The input type for the generateYoutubeLinks function.
 * - GenerateYoutubeLinksOutput - The return type for the generateYoutubeLinks function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateYoutubeLinksInputSchema = z.object({
  foodItem: z.string().describe('The specific food item the user is asking about.'),
  question: z.string().describe('The specific question the user has about the food item.'),
});
export type GenerateYoutubeLinksInput = z.infer<typeof GenerateYoutubeLinksInputSchema>;

const GenerateYoutubeLinksOutputSchema = z.object({
  videoLinks: z
    .array(z.string())
    .describe('An array of YouTube video links relevant to the food item and question.'),
});
export type GenerateYoutubeLinksOutput = z.infer<typeof GenerateYoutubeLinksOutputSchema>;

export async function generateYoutubeLinks(input: GenerateYoutubeLinksInput): Promise<GenerateYoutubeLinksOutput> {
  return generateYoutubeLinksFlow(input);
}

const prompt = ai.definePrompt({
  name: 'youtubeLinkGenerationPrompt',
  input: {schema: GenerateYoutubeLinksInputSchema},
  output: {schema: GenerateYoutubeLinksOutputSchema},
  prompt: `The user is asking about storing "{{{foodItem}}}". Their specific question is: "{{{question}}}".

Please provide up to 3 relevant YouTube video links that would directly help answer this question.
It is crucial that these links point to videos that are **currently available and publicly accessible** on YouTube.
Think about what good YouTube search queries would be for this, then find videos matching those queries.
For example, if the food item is "avocado" and the question is "how to stop it from browning", good search terms might be "keep avocado from browning" or "store cut avocado".

Respond with a JSON object containing a "videoLinks" array of YouTube video URLs. Ensure each item in the "videoLinks" array is a valid YouTube URL string.
If no relevant and currently available videos are found, return an empty array.`,
});

const generateYoutubeLinksFlow = ai.defineFlow(
  {
    name: 'generateYoutubeLinksFlow',
    inputSchema: GenerateYoutubeLinksInputSchema,
    outputSchema: GenerateYoutubeLinksOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);

